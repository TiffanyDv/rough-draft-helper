import React, { useState, useEffect } from "react";
import { Rubric } from "@/entities/Rubric";
import { Submission } from "@/entities/Submission";
import { User } from "@/entities/User";
import { InvokeLLM } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2, Send, Award, TrendingUp } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

import RubricDisplay from "../components/student/RubricDisplay";
import FeedbackPanel from "../components/student/FeedbackPanel";
import ProgressTracker from "../components/student/ProgressTracker";
import CelebrationModal from "../components/student/CelebrationModal";

export default function StudentPortal() {
  const [rubrics, setRubrics] = useState([]);
  const [selectedRubric, setSelectedRubric] = useState(null);
  const [studentName, setStudentName] = useState("");
  const [paragraph, setParagraph] = useState("");
  const [evaluation, setEvaluation] = useState(null);
  const [isEvaluating, setIsEvaluating] = useState(false);
  const [revisionHistory, setRevisionHistory] = useState([]);
  const [currentRevision, setCurrentRevision] = useState(1);
  const [showCelebration, setShowCelebration] = useState(false);
  const [user, setUser] = useState(null);

  useEffect(() => {
    loadRubrics();
    loadUser();
  }, []);

  const loadUser = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      setStudentName(currentUser.full_name || "");
    } catch (error) {
      console.log("User not logged in");
    }
  };

  const loadRubrics = async () => {
    const data = await Rubric.filter({ is_active: true }, "-created_date");
    setRubrics(data);
    if (data.length > 0 && !selectedRubric) {
      setSelectedRubric(data[0]);
    }
  };

  const evaluateParagraph = async () => {
    if (!paragraph.trim() || !selectedRubric || !studentName.trim()) return;

    setIsEvaluating(true);
    
    try {
      const prompt = `You are a writing teacher evaluating a student's paragraph based on a rubric.

CRITICAL INSTRUCTIONS:
- DO NOT write any content for the student
- DO NOT provide example sentences or rewritten text
- ONLY evaluate what they wrote and give specific feedback on improvements

Student's Paragraph:
"${paragraph}"

Rubric:
${selectedRubric.criteria.map(c => `- ${c.name} (${c.points} points): ${c.description}`).join('\n')}

Evaluate the paragraph for each criterion. For each criterion:
1. Award points (0 to max points for that criterion)
2. Provide specific, actionable feedback WITHOUT writing anything for them
3. Point out what's working and what needs improvement

Your feedback should guide them to improve their OWN writing, not give them sentences to copy.`;

      const result = await InvokeLLM({
        prompt: prompt,
        response_json_schema: {
          type: "object",
          properties: {
            criteria_scores: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  criterion_name: { type: "string" },
                  points_earned: { type: "number" },
                  points_possible: { type: "number" },
                  feedback: { type: "string" }
                }
              }
            }
          }
        }
      });

      const totalScore = result.criteria_scores.reduce((sum, c) => sum + c.points_earned, 0);
      const maxScore = selectedRubric.total_points;

      const evaluationData = {
        total_score: totalScore,
        max_score: maxScore,
        criteria_scores: result.criteria_scores
      };

      setEvaluation(evaluationData);

      const submission = await Submission.create({
        rubric_id: selectedRubric.id,
        student_name: studentName,
        paragraph: paragraph,
        evaluation: evaluationData,
        revision_number: currentRevision
      });

      setRevisionHistory([...revisionHistory, {
        revision: currentRevision,
        score: totalScore,
        maxScore: maxScore
      }]);

      if (totalScore === maxScore) {
        setShowCelebration(true);
      }

    } catch (error) {
      console.error("Error evaluating:", error);
    }

    setIsEvaluating(false);
  };

  const handleRevise = () => {
    setCurrentRevision(currentRevision + 1);
    setEvaluation(null);
  };

  return (
    <div className="min-h-screen p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
            Student Writing Portal
          </h1>
          <p className="text-gray-600">Submit your paragraph and get instant feedback</p>
        </div>

        <div className="grid lg:grid-cols-3 gap-6">
          {/* Left Column - Writing Area */}
          <div className="lg:col-span-2 space-y-6">
            <Card className="shadow-lg border-0 bg-white rounded-2xl overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-orange-500 to-orange-600 text-white">
                <CardTitle className="flex items-center gap-2">
                  <Send className="w-5 h-5" />
                  Submit Your Work
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6 space-y-6">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="studentName">Your Name</Label>
                    <Input
                      id="studentName"
                      value={studentName}
                      onChange={(e) => setStudentName(e.target.value)}
                      placeholder="Enter your name"
                      className="mt-2"
                    />
                  </div>
                  <div>
                    <Label htmlFor="rubric">Select Assignment</Label>
                    <Select
                      value={selectedRubric?.id}
                      onValueChange={(value) => {
                        const rubric = rubrics.find(r => r.id === value);
                        setSelectedRubric(rubric);
                        setEvaluation(null);
                        setParagraph("");
                        setRevisionHistory([]);
                        setCurrentRevision(1);
                      }}
                    >
                      <SelectTrigger className="mt-2">
                        <SelectValue placeholder="Choose assignment" />
                      </SelectTrigger>
                      <SelectContent>
                        {rubrics.map((rubric) => (
                          <SelectItem key={rubric.id} value={rubric.id}>
                            {rubric.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div>
                  <Label htmlFor="paragraph">Your Paragraph (Revision {currentRevision})</Label>
                  <Textarea
                    id="paragraph"
                    value={paragraph}
                    onChange={(e) => setParagraph(e.target.value)}
                    placeholder="Paste or type your paragraph here..."
                    className="mt-2 min-h-[300px] text-base leading-relaxed"
                  />
                  <p className="text-sm text-gray-500 mt-2">
                    {paragraph.trim().split(/\s+/).filter(w => w).length} words
                  </p>
                </div>

                <Button
                  onClick={evaluateParagraph}
                  disabled={!paragraph.trim() || !selectedRubric || !studentName.trim() || isEvaluating}
                  className="w-full bg-orange-600 hover:bg-orange-700 text-white h-12 text-lg shadow-lg"
                >
                  {isEvaluating ? (
                    <>
                      <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                      Evaluating...
                    </>
                  ) : (
                    <>
                      <Send className="w-5 h-5 mr-2" />
                      Get Feedback
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>

            <AnimatePresence>
              {evaluation && (
                <FeedbackPanel
                  evaluation={evaluation}
                  onRevise={handleRevise}
                />
              )}
            </AnimatePresence>
          </div>

          {/* Right Column - Rubric & Progress */}
          <div className="space-y-6">
            {selectedRubric && (
              <RubricDisplay rubric={selectedRubric} />
            )}

            {revisionHistory.length > 0 && (
              <ProgressTracker history={revisionHistory} />
            )}
          </div>
        </div>
      </div>

      <CelebrationModal 
        show={showCelebration}
        onClose={() => setShowCelebration(false)}
        score={evaluation?.total_score}
        maxScore={evaluation?.max_score}
      />
    </div>
  );
}