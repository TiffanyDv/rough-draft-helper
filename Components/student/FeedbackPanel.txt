import React from "react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { MessageSquare, RefreshCw, CheckCircle, AlertCircle } from "lucide-react";

export default function FeedbackPanel({ evaluation, onRevise }) {
  const percentage = (evaluation.total_score / evaluation.max_score) * 100;
  const isPerfect = evaluation.total_score === evaluation.max_score;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
    >
      <Card className="shadow-lg border-0 bg-white rounded-2xl overflow-hidden">
        <CardHeader className={`${isPerfect ? 'bg-gradient-to-r from-green-500 to-green-600' : 'bg-gradient-to-r from-blue-500 to-blue-600'} text-white`}>
          <div className="flex justify-between items-center">
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="w-5 h-5" />
              Your Feedback
            </CardTitle>
            <div className="text-right">
              <div className="text-3xl font-bold">{evaluation.total_score}/{evaluation.max_score}</div>
              <div className="text-sm opacity-90">{percentage.toFixed(0)}%</div>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-6 space-y-6">
          {isPerfect ? (
            <div className="text-center py-6">
              <div className="w-20 h-20 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center">
                <CheckCircle className="w-10 h-10 text-green-600" />
              </div>
              <h3 className="text-2xl font-bold text-gray-900 mb-2">Perfect Score!</h3>
              <p className="text-gray-600">You've earned all available points. Excellent work!</p>
            </div>
          ) : (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <AlertCircle className="w-5 h-5 text-blue-600 mt-0.5" />
                <div>
                  <p className="font-medium text-blue-900">Keep working to improve your score!</p>
                  <p className="text-sm text-blue-700 mt-1">Review the feedback below and revise your paragraph.</p>
                </div>
              </div>
            </div>
          )}

          <div className="space-y-4">
            {evaluation.criteria_scores.map((criterion, index) => {
              const isFullPoints = criterion.points_earned === criterion.points_possible;
              return (
                <div key={index} className={`p-4 rounded-lg border-2 ${isFullPoints ? 'border-green-200 bg-green-50' : 'border-orange-200 bg-orange-50'}`}>
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex items-center gap-2">
                      <span className="font-semibold text-gray-900">{criterion.criterion_name}</span>
                      {isFullPoints && <CheckCircle className="w-4 h-4 text-green-600" />}
                    </div>
                    <Badge className={isFullPoints ? "bg-green-600" : "bg-orange-600"}>
                      {criterion.points_earned}/{criterion.points_possible}
                    </Badge>
                  </div>
                  <p className="text-sm text-gray-700 leading-relaxed">{criterion.feedback}</p>
                </div>
              );
            })}
          </div>

          {!isPerfect && (
            <Button
              onClick={onRevise}
              className="w-full bg-orange-600 hover:bg-orange-700 h-12 text-lg"
            >
              <RefreshCw className="w-5 h-5 mr-2" />
              Revise and Resubmit
            </Button>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
}