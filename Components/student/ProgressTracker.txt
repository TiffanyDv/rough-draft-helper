import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { TrendingUp } from "lucide-react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";

export default function ProgressTracker({ history }) {
  const chartData = history.map(h => ({
    revision: `Rev ${h.revision}`,
    score: h.score,
    percentage: (h.score / h.maxScore) * 100
  }));

  const improvement = history.length > 1 
    ? history[history.length - 1].score - history[0].score 
    : 0;

  return (
    <Card className="shadow-lg border-0 bg-white rounded-2xl overflow-hidden">
      <CardHeader className="bg-gradient-to-br from-purple-50 to-purple-100 border-b border-purple-200">
        <CardTitle className="flex items-center gap-2 text-lg">
          <TrendingUp className="w-5 h-5 text-purple-600" />
          Your Progress
        </CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="text-center p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-gray-600">Revisions</p>
              <p className="text-2xl font-bold text-blue-600">{history.length}</p>
            </div>
            <div className="text-center p-3 bg-green-50 rounded-lg">
              <p className="text-sm text-gray-600">Improvement</p>
              <p className="text-2xl font-bold text-green-600">+{improvement}pts</p>
            </div>
          </div>

          {history.length > 1 && (
            <div className="h-48">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={chartData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="revision" />
                  <YAxis />
                  <Tooltip />
                  <Line 
                    type="monotone" 
                    dataKey="score" 
                    stroke="#f97316" 
                    strokeWidth={3}
                    dot={{ fill: '#f97316', r: 5 }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          )}

          <div className="space-y-2">
            {history.map((h, index) => (
              <div key={index} className="flex justify-between items-center text-sm p-2 bg-gray-50 rounded">
                <span className="text-gray-600">Revision {h.revision}</span>
                <span className="font-semibold text-orange-600">{h.score}/{h.maxScore}</span>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}